// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.7;

//interface for the router contract of uniswap

interface Iuniswap {
    function swapTokensForExactETH(
    uint amountOut, 
    uint amountInMax, 
    address[] 
    calldata path, 
    address to, 
    uint deadline)
        external
        returns (uint[] memory amounts);
    function WETH() external pure returns (address);
}

interface IERC20 {
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
    function approve(
        address spender, 
        uint256 amount) external returns (bool);
}

contract MyDefiProject{
    Iuniswap uniswap;
    
    constructor (address _iuniswap){
        uniswap = Iuniswap(_iuniswap);
    }
    function swapTokensForEth(
    address token,
    uint amountIn,
    uint amountOutMin,
    uint deadline) external{
        IERC20(token).transferFrom(msg.sender, address(this), amountIn);
        address[] memory path = new address[](2);
        path[0] = token;
        path[1] = uniswap.WETH();
        IERC20(token).approve(address(uniswap), amountIn);
        uniswap.swapTokensForExactETH(
            amountIn,
            amountOutMin,
            path,
            msg.sender,
            deadline);
    }
}
